package limit;

import control.ControleVendas;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import model.*;
import java.util.Vector;

/**
 *
 * @author Kevin
 */
public class LimitePagamento extends javax.swing.JFrame {

    //Declaração das variáveis
    private ControleVendas ctrVenda;
    private Vector<Corretor> vec;

    //Metodo construtor
    public LimitePagamento(ControleVendas pCtrVendas) {
        //Recebe o controle de vendas
        ctrVenda = pCtrVendas;
        //Recebe a lista de vendedores
        vec = ctrVenda.getCtrPrincipal().getObjControleCorretor().getVecCorretor();
        initComponents();
        //Desabilita a possibilidade de edição dos campos de ganho no ano e no mes
        jTextFieldGanhoAno.setEditable(false);
        jTextFieldGanhoMes.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldData = new javax.swing.JTextField();
        jComboBoxCorretor = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButtonPagar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldGanhoMes = new javax.swing.JTextField();
        jTextFieldGanhoAno = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pagamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel1.setText("Data desejada: ");

        String[] str = new String[vec.size()];
        int cont = 0;
        for(Corretor ct: vec){
            str[cont] = ct.getNome();
            cont++;
        }
        jComboBoxCorretor.setModel(new javax.swing.DefaultComboBoxModel<>(str));

        jLabel2.setText("Corretor: ");

        jButtonPagar.setText("Pagar");
        jButtonPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPagarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("Ganhos no Mês: ");

        jLabel4.setText("Ganhos no Ano: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonPagar)
                        .addGap(32, 32, 32)
                        .addComponent(jButtonCancelar))
                    .addComponent(jTextFieldData)
                    .addComponent(jComboBoxCorretor, 0, 251, Short.MAX_VALUE)
                    .addComponent(jTextFieldGanhoMes)
                    .addComponent(jTextFieldGanhoAno))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonCancelar, jButtonPagar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxCorretor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldGanhoMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldGanhoAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPagar)
                    .addComponent(jButtonCancelar))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Caso seja precionado o botão de cancelar o programa irá deixar os campos vazios para a próxima execução, e fechará a janela
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        jTextFieldData.setText("");
        jTextFieldGanhoAno.setText("");
        jTextFieldGanhoMes.setText("");
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    //Caso seja precionado o botão pagar, o programa pegará a data e o corretor e calculará o salário dele
    private void jButtonPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPagarActionPerformed
        ArrayList<Venda> listaVenda = ctrVenda.getArrayListVenda();
        double ganhoMes = 0, ganhoAno = 0;

        Corretor cor = vec.elementAt(jComboBoxCorretor.getSelectedIndex());
        //Separa a data recebida, para poder comparar seu mês e ano
        String str = jTextFieldData.getText();
        String[] split = str.split("/");
        //Cria uma array para poder calcular a quantidade de mês que o corretor contratado deve ter recebido durante um ano
        ArrayList<Integer> contMes = new ArrayList<>();
        //Coloca os valores do mês e ano nas sequintes variáveis
        int mesEscolhido = Integer.parseInt(split[0]);
        int anoEscolhido = Integer.parseInt(split[1]);
        //Vai percorrer a lista de vendas
        for (Venda v : listaVenda) {
            //Recebe a data da venda e a transforma em int para poder realizar a comparação
            Date data = v.getDataVenda();
            Calendar cal = Calendar.getInstance();
            cal.setTime(new Date(data.getTime()));
            int ano = cal.get(Calendar.YEAR);
            //O campo date da venda armazenou os dados no formato MM/dd/YYYY,
            //Usuando calendar para pegar o mes e ano, ele usa o formato dd//MM/YYYY, por isso é para pegar o mês é necessário pegar o dia do calendar
            int mes = cal.get(Calendar.DAY_OF_MONTH);
            
            //Se o corretor e o ano forem iguais irá calcular os ganhos anuais e mensais consequentemente
            if (ano == anoEscolhido || cor.getNome().equals(v.getNomeCorretor().getNome())) {
                //Caso o mes seja igual ao da venda calcula para comissionado e para contratado
                if (mes == mesEscolhido) {
                    if (cor instanceof Comissionado) {
                        ganhoMes += v.getValorReal() * ((Comissionado) cor).getComissao();
                    } else {
                        ganhoMes += v.getValorReal() * (0.01);
                    }
                }
                //Aqui realizará a contação dos meses que o corretor vendou meses para caso ele seja um contratado haja seu pagamento
                int i = 0;
                for (int x : contMes) {
                    if (x == mes) {
                        i++;
                    }
                }
                //Se o mês não tiver no array de meses, insere ele no array, caso já esteja simplemesmente ignora o mês em questão
                if (i == 0) {
                    contMes.add(mes);
                }
                
                //Aqui realiza a soma do vendor para saber seus ganhos anuais
                if (cor instanceof Comissionado) {
                    ganhoAno += v.getValorReal() * ((Comissionado) cor).getComissao();
                } else {
                    ganhoAno += v.getValorReal() * (0.01);
                }
            }
        }
        //Adiciona o salário fixo caso o corretor seja contratado
        if (cor instanceof Contratado) {
            ganhoMes += ((Contratado) cor).getSalarioFixo();
            ganhoAno += contMes.size() * ((Contratado) cor).getSalarioFixo();

        }
        //Mostra o valor do salário
        jTextFieldGanhoMes.setText("R$" + ganhoMes);
        jTextFieldGanhoAno.setText("R$" + ganhoAno);


    }//GEN-LAST:event_jButtonPagarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonPagar;
    private javax.swing.JComboBox<String> jComboBoxCorretor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldData;
    private javax.swing.JTextField jTextFieldGanhoAno;
    private javax.swing.JTextField jTextFieldGanhoMes;
    // End of variables declaration//GEN-END:variables
}
